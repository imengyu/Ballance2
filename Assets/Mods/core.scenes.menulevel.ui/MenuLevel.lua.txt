
-- 游戏进入页面主菜单控制器

GameManager = Ballance2.GameManager
GameLogger = Ballance2.GameLogger
GameSoundType = Ballance2.Interfaces.GameSoundType
GamePartName = Ballance2.CoreBridge.GamePartName
SkyBoxUtils = Ballance2.Utils.SkyBoxUtils

RenderSettings = UnityEngine.RenderSettings
Vector3 = UnityEngine.Vector3
Time = UnityEngine.Time
Color = UnityEngine.Color

local UIManager = GameManager.UIManager
local SoundManager = Slua.As(GameManager.GetManager("SoundManager"), Ballance2.Interfaces.ISoundManager)
local TAG = "MenuLevel:MainCamera"

MenuLevel = {

  runningLoop = false,
  runningLzLoop = false,

  GameLuaObjectHost = nil,
  domePosition = nil,
  I_Zone = nil,
  I_Camera = nil,
  I_Light_Day = nil,
  I_Light_Night = nil,
  I_Zone_SuDu = nil,
  I_Zone_NenLi = nil,
  I_Zone_LiLiang = nil,
  speed = -6,

  skyBoxDay = nil,
  skyBoxNight = nil,
  skyBox = nil,

  dialogQuitId = nil,
  pageMain = nil,
  pageStart = nil,
  pageAbout = nil,
  pageHighScore = nil,
  pageLightZone = nil,

  soundMenuAtmo = nil,
  soundMenuLoad = nil,
}

local thisMod = nil

function class_MenuLevel()

  function MenuLevel:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
  end

  function MenuLevel:Start(thisGameObject)
    self.gameObject = thisGameObject

    GameManager.SetGameBaseCameraVisible(false)
    
    self.transform = self.gameObject.transform
    self.GameLuaObjectHost = self.gameObject:GetComponent("GameLuaObjectHost")

    thisMod = self.GameLuaObjectHost.GameMod
    
    self.domePosition = self.transform:Find("I_Dome_MF").position
    self.I_Camera:SetActive(true)
    -- izone
    self.I_Zone_SuDu.transform:Find("Selector"):GetComponent("OutlineHighlightPicker").onClick:AddListener(function() self:OnLevelStart("13") end)
    self.I_Zone_LiLiang.transform:Find("Selector"):GetComponent("OutlineHighlightPicker").onClick:AddListener(function() self:OnLevelStart("14") end)
    self.I_Zone_NenLi.transform:Find("Selector"):GetComponent("OutlineHighlightPicker").onClick:AddListener(function() self:OnLevelStart("15") end)
    --skybox
    self.skyBox = self.I_Camera:GetComponent("Skybox")
    self.skyBoxDay = SkyBoxUtils.MakeSkyBox("C")
    self.skyBoxNight = SkyBoxUtils.MakeSkyBox("D")
    self.skyBox.material = self.skyBoxDay

    self.runningLoop = true

    self:InitMusic()
    self:InitUI()
    self:SetFog(false)
    
    UIManager:MaskBlackFadeOut(2)
	end

	function MenuLevel:OnDesory()
    self.runningLoop = false
    self:DestroyMusic();
    self:DestoryUI();
	end

	function MenuLevel:Update()
		if(self.runningLoop) then
			self.I_Camera.transform:RotateAround(self.domePosition, Vector3.up, Time.deltaTime * self.speed)
			self.I_Camera.transform:LookAt(self.domePosition)
    end
    if(self.runningLzLoop) then 
      self.I_Zone_SuDu.transform:LookAt(self.I_Camera.transform.position, Vector3.up)
      self.I_Zone_NenLi.transform:LookAt(self.I_Camera.transform.position, Vector3.up)
      self.I_Zone_LiLiang.transform:LookAt(self.I_Camera.transform.position, Vector3.up)
    end
  end
  
  -- 初始化音乐
  function MenuLevel:InitMusic() 
    self.soundMenuAtmo = SoundManager:RegisterSoundPlayer(GameSoundType.Background, "core.assets.sounds:Menu_atmo.wav", false, true, "MenuAtmo")
    self.soundMenuLoad = SoundManager:RegisterSoundPlayer(GameSoundType.UI, "core.assets.sounds:Menu_load.wav", false, true, "MenuLoad")
    if(self.soundMenuAtmo == nil) then
      GameLogger.Error(TAG, "soundMenuAtmo is null")
    else
      self.soundMenuAtmo.loop = true
      self.soundMenuAtmo:Play()
    end
    
  end
  function MenuLevel:DestroyMusic() 
    self.soundMenuAtmo = SoundManager:DestroySoundPlayer(self.soundMenuAtmo)
    self.soundMenuLoad = SoundManager:DestroySoundPlayer(self.soundMenuLoad)   
  end
  -- 初始化 UI
  function MenuLevel:InitUI() 

    local pageMainXml = thisMod:GetTextAsset("PageMain.xml").text
    local pageStartXml = thisMod:GetTextAsset("PageStart.xml").text
    local pageAboutXml = thisMod:GetTextAsset("PageAbout.xml").text
    local pageLightZoneXml = thisMod:GetTextAsset("PageLightZone.xml").text
    local pageHighscoreXml = thisMod:GetTextAsset("PageHighscore.xml").text
    
    self.pageMain = UIManager:RegisterBallanceUIPage("main", pageMainXml, 
      { "btn.start:click","btn.highscore:click","btn.settings:click","btn.about:click","btn.quit:click" }, 
      { 
        function(evtName) UIManager:GotoUIPage(self.pageStart.PagePath) end, 
        function(evtName) UIManager:GotoUIPage(self.pageHighScore.PagePath) end, 
        function(evtName) 
          GameManager.GameMediator:CallAction(GamePartName.Core, "ShowSettings", { "main" })
        end, 
        function(evtName) UIManager:GotoUIPage(self.pageAbout.PagePath) end, 
        function(evtName) self.dialogQuitId = UIManager:GlobalConfirm("真的要退出游戏吗", "提示", "确定","取消") end
      }, 
      self, "Default", nil)

    self.pageStart = UIManager:RegisterBallanceUIPage("main.start", pageStartXml, 
      { 
        "btn.back:click","btn.lev.1:click","btn.lev.2:click","btn.lev.3:click","btn.lev.4:click","btn.lev.5:click","btn.lev.6:click",
        "btn.lev.7:click","btn.lev.8:click","btn.lev.9:click","btn.lev.10:click","btn.lev.11:click","btn.lev.12:click","btn.lev.lz:click"
      }, 
      { 
        function(evtName) UIManager:BackUIPage() end, 
        function(evtName) self:OnLevelStart("1") end,
        function(evtName) self:OnLevelStart("2") end,
        function(evtName) self:OnLevelStart("3") end,
        function(evtName) self:OnLevelStart("4") end,
        function(evtName) self:OnLevelStart("5") end,
        function(evtName) self:OnLevelStart("6") end,
        function(evtName) self:OnLevelStart("7") end,
        function(evtName) self:OnLevelStart("8") end,
        function(evtName) self:OnLevelStart("9") end,
        function(evtName) self:OnLevelStart("10") end,
        function(evtName) self:OnLevelStart("11") end,
        function(evtName) self:OnLevelStart("12") end,
        function(evtName) self:OnSwitchLz(true) end
      }, 
      self,
      "Default",
      nil)
    self.pageAbout = UIManager:RegisterBallanceUIPage("main.about", pageAboutXml, 
      { "btn.back:click" }, 
      { function(evtName) UIManager:BackUIPage() end }, 
      self, "Default", nil)
    self.pageHighScore = UIManager:RegisterBallanceUIPage("main.highscore", pageHighscoreXml, 
      { "btn.back:click" }, 
      { function(evtName) UIManager:BackUIPage() end }, 
      self, "Default", nil)
    self.pageLightZone = UIManager:RegisterBallanceUIPage("main.start.lightzone", pageLightZoneXml, 
      { "btn.back:click" }, 
      { 
        function(evtName) 
          UIManager:BackUIPage() 
          self:OnSwitchLz(false)
        end 
      }, 
      self, "None", nil)

    --
    UIManager:GotoUIPage(self.pageMain.PagePath)

    -- 对话框事件
    GameManager.GameMediator:RegisterEventHandler(GameEventNames.EVENT_GLOBAL_ALERT_CLOSE, TAG, function(evtName, id, confirm)
      if(id == self.dialogQuitId) then
        if(confirm) then GameManager:QuitGame() else UIManager:GotoUIPage(self.pageMain.PagePath) end
      end
    end)
  end
  function MenuLevel:DestoryUI()

  end
  
  function MenuLevel:SetFog(isLz) 
    RenderSettings.fog = true
    RenderSettings.fogDensity = 0.005
    if(isLz) then
      RenderSettings.fogColor = Color(0.180, 0.254, 0.301)
    else
      RenderSettings.fogColor = Color(0.745, 0.623, 0.384)
    end
  end

  function MenuLevel:OnSwitchLz(on) 
    if(on) 
    then
      UIManager:MaskBlackSet(true)
      UIManager:MaskBlackFadeOut(1)
      UIManager:GotoUIPage(self.pageLightZone.PagePath)
      self.I_Light_Night:SetActive(true)
      self.I_Light_Day:SetActive(false)
      self.I_Zone:SetActive(true)
      self.skyBox.material = self.skyBoxNight
      self.runningLzLoop = true
      self:SetFog(true)
    else
      UIManager:MaskBlackSet(true)
      UIManager:MaskBlackFadeOut(1)
      UIManager:GotoUIPage(self.pageMain.PagePath)
      self.I_Light_Day:SetActive(true)
      self.I_Light_Night:SetActive(false)
      self.I_Zone:SetActive(false)
      self.skyBox.material = self.skyBoxDay
      self.runningLzLoop = false
      self:SetFog(false)
    end
  end

  function MenuLevel:OnLevelStart(lev) 
    self.soundMenuLoad:Play()
    GameManager.GameMediator:CallAction(GamePartName.LevelLoader, "LoadLevel", { lev })
  end


  return MenuLevel:new(nil)

end